?writeMetrics
writeMetrics(writeDir = "Desktop/", )
x <- matrix(1:30, 6, 5)
View(x)
View(x)
apply(x,1,sum)
apply(x,2,sum)
lapply(x,sum)
?apply
library(datasets)
data(iris)
?iris
iris
?lapply
lapply(iris[,1], mean)
iris
?colmean
?col
?colsum
?Colsum
?colsums
?colMeans
colMeans(Iris[,1])
colMeans(Iris)
apply(Iris, 1, mean)
colMeans(iris)
apply(iris, 1, mean)
iris$mean
View(iris)
colSums(iris)
colSums(iris[,1])
colSums(iris[1,1])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 -82.63636
debug(ls)
ls
ls()
debug(ls)
ls()
library(datasets)
data(iris)
iris
tapply(iris$virginica, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$virginica, mean)
tapply(iris$Sepal.Length, iris$virginica,)
tapply(iris$Sepal.Length, iris$virginica, sum)
mean(irisSepal.L[irisSpecies=='virginica'])
mean(irisSepal.Length[irisSpecies=='virginica'])
?mean
mean(iris$Sepal.Length[irisSpecies=='virginica'])
mean(iris$Sepal.Length[Species=='virginica'])
mean(iris$Sepal.Length[$Species=='virginica'])
mean(iris$Sepal.Length[Species=='virginica'])
mean(a$virginica$Sepal.Length)
mean(iris$virginica$Sepal.Length)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
mtcars
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x>0]
x[c(x[3], x[5], x[7])]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
c(11,2,NA)
vect2 <- c(11,2,NA)
vect2
names(vect2) <-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix( 1:20, nrow = 4, ncol = 5)
matrix(1:20, 4,5)
matrix( data = 1:20, nrow = 4, ncol = 5)
infor()
info()
my_matrix2 <-matrix( data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data, cnames)
?dim
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
install.packages("RMySQL")
#Producing a tidy execution dataset from DeathPenaltyInfo.org
#Producing a tidy execution dataset from DeathPenaltyInfo.org
library(data.table)
library(plyr)
library(gcookbook)
#Downloading dataset
download.file("http://www.deathpenaltyinfo.org/exec-xls-export",
"execution_data.csv", method = "curl" )
#Reading and setting to data frame
exec <- read.csv("execution_data.csv")
exec <- data.table(exec)
#Utalize setkey to sort data by Race to view incomplete cases
#For some reason complete.cases didn't showup the actual empty cases in the data
setkey(exec, Race)
#Exclude the first 36 incomplete observations
tidy_exec <- exec[37:1438]
#export tidy exec
write.csv(tidy_exec, file = "tidy_execution.csv")
#Parsed through Date column to produce a year column
year_exec <- mutate(tidy_exec, Year = years(tidy_exec$Date))
#Generated a stacked bar plot demonstrating executions as a function of race
plot <- ggplot(year_exec, aes(x=Year, fill = Race, order = -as.numeric(Race))) +
geom_bar() + theme(axis.text.x = element_text(angle=90, hjust=1, vjust=.5))+
labs(title = "Executions by Race 1977-2015",x = "Year", y = "Executions") +
coord_cartesian(ylim = c(0, 100))
#Saved plot in WD
ggsave("Execution_by_race.png")
library(data.table)
library(data.table)
#Obtaining data and modifying dates
data <- read.csv2("household_power_consumption.txt")
data <- data.table(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
#Subsetting dates 02-01-07 and 02-02-07 from data
sub_data <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
#Histogram for plot 1
hist(as.numeric(sub_data$Global_active_power)/1000, main = "Global Active Power"
, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "RED")
## Save copy of the file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
library(data.table)
#Obtaining data and modifying dates
data <- read.csv2("household_power_consumption.txt")
data <- data.table(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
#Subsetting dates 02-01-07 and 02-02-07 from data
sub_data <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
#Histogram for plot 1
hist(as.numeric(sub_data$Global_active_power)/1000, main = "Global Active Power"
, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "RED")
## Save copy of the file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
getwd()
setwd("Desktop/Work/Google Drive//School Work//Exploratory Data Analysis//Project 1")
library(data.table)
#Obtaining data and modifying dates
data <- read.csv2("household_power_consumption.txt")
data <- data.table(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
#Subsetting dates 02-01-07 and 02-02-07 from data
sub_data <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
#Histogram for plot 1
hist(as.numeric(sub_data$Global_active_power)/1000, main = "Global Active Power"
, xlab = "Global Active Power (kilowatts)", ylab = "Frequency",
col = "RED")
## Save copy of the file
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
a <- as.POSIXct(paste(sub_data$Date, sub_data$Time), format="%Y-%m-%d %H:%M:%S")
a
aa <- sub_data
aa$Date <- a
View(aa)
View(aa)
TimeDate <- as.POSIXct(paste(sub_data$Date, sub_data$Time), format="%Y-%m-%d %H:%M:%S")
sub_data$Date <- TimeDate
View(sub_data)
View(sub_data)
with(sub_data, plot(Date, Global_active_power))
?plot
with(sub_data, plot(Date, Global_active_power, type = "l"))
with(sub_data, plot(Date, Global_active_power/1000, type = "l"))
with(sub_data, plot(Date, (Global_active_power)/1000, type = "l"))
plot(sub_data$Date, sub_data$Global_active_power/1000, type = "l"))
plot(sub_data$Date, as.numeric(sub_data$Global_active_power)/1000), type = "l"))
plot(sub_data$Date, sub_data$Global_active_power/1000, type = "l"))
plot(sub_data$Date, sub_data$Global_active_power, type = "l"))
plot(sub_data$Date, sub_data$Global_active_power, type = "l")
plot(sub_data$Date, sub_data$Global_active_power, type = "l", xlab = "Date", ylab = "Global Active Power")
sub_data$Global_active_power <- (sub_data$Global_active_power)/1000
?data.table
?mutate
mutate(sub_data, Global_active_power = Global_active_power/1000)
library(plyr)
mutate(sub_data, Global_active_power = Global_active_power/1000)
mutate(sub_data, Global_active_power = as.Numeric(Global_active_power)/1000)
?as.Numeric
?as
mutate(sub_data, Global_active_power = as.numeric(Global_active_power)/1000)
View(sub_data)
View(sub_data)
plot(sub_data$Date, sub_data$Global_active_power, type = "l", xlab = "Date", ylab = "Global Active Power")
View(aa)
View(aa)
mutate(sub_data, Global_active_power = as.numeric(Global_active_power)/1000)
java <- mutate(sub_data, Global_active_power = as.numeric(Global_active_power)/1000)
View(java)
View(java)
plot(java$Date, java$Global_active_power, type = "l", xlab = "Date", ylab = "Global Active Power")
library(data.table)
library(plyr)
#Obtaining data and modifying dates
data <- read.csv2("household_power_consumption.txt")
data <- data.table(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
#Subsetting dates 02-01-07 and 02-02-07 from data
sub_data <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
#Combining Time and Date columns into date column
TimeDate <- as.POSIXct(paste(sub_data$Date, sub_data$Time),
format="%Y-%m-%d %H:%M:%S")
sub_data$Date <- TimeDate
sub_data <- mutate(sub_data, Global_active_power =
as.numeric(Global_active_power)/1000)
#Plot 2
plot(sub_data$Date, sub_data$Global_active_power, type = "l", xlab = "Date",
ylab = "Global Active Power")
## Save copy of the file
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
View(sub_data)
View(sub_data)
with(sub_data, plot(Date, c(Sub_metering_1, Sub_metering_2, Sub_metering_3) )
)
with(sub_data, plot(Date, Sub_metering_1))
with(sub_data, plot(Date, Sub_metering_2))
with(sub_data, plot(Date, Sub_metering_3))
with(sub_data, { plot(Date, Sub_metering_1), plot(Date, Sub_metering_2), plot(Date, Sub_metering_3)} )
with(sub_data { plot(Date, Sub_metering_1), plot(Date, Sub_metering_2), plot(Date, Sub_metering_3)} )
{ plot(Date, Sub_metering_1), plot(Date, Sub_metering_2), plot(Date, Sub_metering_3)} )
with(sub_data, plot(Date, Sub_metering_3) + plot(Date, Sub_metering_3))
plot(Date, Sub_metering_3) + plot(Date, Sub_metering_3)
plot(sub_data$Date, sub_data$Sub_metering_3) + plot(sub_data$Date, sub_data$Sub_metering_3)
library(data.table)
library(plyr)
#Obtaining data and modifying dates
data <- read.csv2("household_power_consumption.txt")
data <- data.table(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
#Subsetting dates 02-01-07 and 02-02-07 from data
sub_data <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
#Combining Time and Date columns into date column
TimeDate <- as.POSIXct(paste(sub_data$Date, sub_data$Time),
format="%Y-%m-%d %H:%M:%S")
sub_data$Date <- TimeDate
#Producing plot3
with(sub_data, {
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
Producing plot3
with(sub_data, {
plot(Sub_metering_1~Date, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Date,col='Red')
lines(Sub_metering_3~Date,col='Blue')
})
library(data.table)
library(plyr)
#Obtaining data and modifying dates
data <- read.csv2("household_power_consumption.txt")
data <- data.table(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
#Subsetting dates 02-01-07 and 02-02-07 from data
sub_data <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
#Combining Time and Date columns into date column
TimeDate <- as.POSIXct(paste(sub_data$Date, sub_data$Time),
format="%Y-%m-%d %H:%M:%S")
sub_data$Date <- TimeDate
sub_data <- mutate(sub_data, Global_active_power =
as.numeric(Global_active_power)/1000)
#Producing plot3
with(sub_data, {
plot(Sub_metering_1~Date, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Date,col='Red')
lines(Sub_metering_3~Date,col='Blue')
})
library(data.table)
library(plyr)
#Obtaining data and modifying dates
data <- read.csv2("household_power_consumption.txt")
data <- data.table(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
#Subsetting dates 02-01-07 and 02-02-07 from data
sub_data <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
#Combining Time and Date columns into date column
TimeDate <- as.POSIXct(paste(sub_data$Date, sub_data$Time),
format="%Y-%m-%d %H:%M:%S")
sub_data$Date <- TimeDate
sub_data <- mutate(sub_data, Global_active_power =
as.numeric(Global_active_power)/1000)
#Producing plot3
with(sub_data, {
plot(Sub_metering_1~Date, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Date,col='Red')
lines(Sub_metering_3~Date,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#Producing plot3
with(sub_data, {
plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_1,col='Red')
lines(Date, Sub_metering_1,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#Producing plot3
with(sub_data, {
plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_2,col='Red')
lines(Date, Sub_metering_3,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
library(data.table)
library(plyr)
#Obtaining data and modifying dates
data <- read.csv2("household_power_consumption.txt")
data <- data.table(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
#Subsetting dates 02-01-07 and 02-02-07 from data
sub_data <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
#Combining Time and Date columns into date column
TimeDate <- as.POSIXct(paste(sub_data$Date, sub_data$Time),
format="%Y-%m-%d %H:%M:%S")
sub_data$Date <- TimeDate
sub_data <- mutate(sub_data, Global_active_power =
as.numeric(Global_active_power)/1000)
#Producing plot3 with legend
with(sub_data, {
plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_2,col='Red')
lines(Date, Sub_metering_3,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving copy of the plot
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
View(sub_data)
View(sub_data)
#Producing Plot 4
par(mfrow = c(2, 2))
with(sub_data, {
plot(Date, Global_active_power, type = "l", ylab = "Global Active Power"),
plot(Date, Voltage, type = "l", ylab = "Voltage"),
(plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_2,col='Red')
lines(Date, Sub_metering_3,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))),
plot(Date, Global_reactive_power, type = "l", ylab ="Global Reactive Power")
})
par(mfrow = c(2, 2))
with(sub_data, {
plot(Date, Global_active_power, type = "l", ylab = "Global Active Power")
plot(Date, Voltage, type = "l", ylab = "Voltage")
(plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_2,col='Red')
lines(Date, Sub_metering_3,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")))
plot(Date, Global_reactive_power, type = "l", ylab ="Global Reactive Power")
})
par(mfrow = c(2, 2))
with(sub_data, {
plot(Date, Global_active_power, type = "l", ylab = "Global Active Power")
plot(Date, Voltage, type = "l", ylab = "Voltage")
plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_2,col='Red')
lines(Date, Sub_metering_3,col='Blue')
plot(Date, Global_reactive_power, type = "l", ylab ="Global Reactive Power")
})
?mar
?par
#Producing Plot 4
par(mfrow = c(2, 2), mar = c(2,4,3,2))
with(sub_data, {
plot(Date, Global_active_power, type = "l", ylab = "Global Active Power")
plot(Date, Voltage, type = "l", ylab = "Voltage")
plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_2,col='Red')
lines(Date, Sub_metering_3,col='Blue')
plot(Date, Global_reactive_power, type = "l", ylab ="Global Reactive Power")
})
Producing Plot 4
par(mfrow = c(2, 2), mar = c(2,4,2,2))
with(sub_data, {
plot(Date, Global_active_power, type = "l", ylab = "Global Active Power")
plot(Date, Voltage, type = "l", ylab = "Voltage")
plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_2,col='Red')
lines(Date, Sub_metering_3,col='Blue')
plot(Date, Global_reactive_power, type = "l", ylab ="Global Reactive Power")
})
ucing Plot 4
par(mfrow = c(2, 2), mar = c(2,4,2,2))
with(sub_data, {
plot(Date, Global_active_power, type = "l", ylab = "Global Active Power")
plot(Date, Voltage, type = "l", ylab = "Voltage")
plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_2,col='Red')
lines(Date, Sub_metering_3,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Date, Global_reactive_power, type = "l", ylab ="Global Reactive Power")
})
library(data.table)
library(plyr)
#Obtaining data and modifying dates
data <- read.csv2("household_power_consumption.txt")
data <- data.table(data)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
#Subsetting dates 02-01-07 and 02-02-07 from data
sub_data <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
#Combining Time and Date columns into Date column
TimeDate <- as.POSIXct(paste(sub_data$Date, sub_data$Time),
format="%Y-%m-%d %H:%M:%S")
sub_data$Date <- TimeDate
sub_data <- mutate(sub_data, Global_active_power =
as.numeric(Global_active_power)/1000)
#Producing Plot 4
par(mfrow = c(2, 2), mar = c(2,4,2,2))
with(sub_data, {
plot(Date, Global_active_power, type = "l", ylab = "Global Active Power")
plot(Date, Voltage, type = "l", ylab = "Voltage")
plot(Date, Sub_metering_1, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Date, Sub_metering_2,col='Red')
lines(Date, Sub_metering_3,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Date, Global_reactive_power, type = "l", ylab ="Global Reactive Power")
})
# Saving copy of the plot
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
